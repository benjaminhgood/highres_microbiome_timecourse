######################################################
#
# Make a copy of this file and edit it to your liking
#
######################################################

# Which population to plot
species_names = ['Bacteroides_coprocola_61586', 'Bacteroides_coprocola_61586', 'Bacteroides_coprocola_61586','Bacteroides_coprocola_61586']
# Alternative: can access entire list using function:
#species_names = parse_midas_data.parse_good_species_list()

# Output filename (alter as needed)
filename = parse_midas_data.analysis_directory+'Bacteroides_coprocola_61586_timecourse.png'

min_coverage=20

####################################################################
#
#  Function controlling which mutations are colored
#
#      Returns: true for colored
#               false for not colored
#
####################################################################
def color_condition(population_idx, chromosome, location, gene_name, variant_type, times, freqs, depths):

    idx_80 = numpy.fabs(times-81).argmin()

    # don't use interpolated freqs yet.    
    
    # First two conditions require mutation to start at low frequency
    # i.e., to focus on "de novo" mutations
    
    if population_idx==0:
        condition = freqs[idx_80]>0.8
    elif population_idx==1:
        condition = (freqs[idx_80]>0.6)*(freqs[idx_80]<0.8)
    elif population_idx==2:
        condition = (freqs[idx_80]>0.2)*(freqs[idx_80]<0.6)
    elif population_idx==2:
        condition = (freqs[idx_80]<0.15)*(freqs[-1]>0.2)
    else:
        condition = False
        
    return condition
